#ifndef MIDI_SONGS_H
#define MIDI_SONGS_H

#include "orchestra_common.h"

// Note Event Structure for Orchestra
typedef struct
{
    uint8_t note;         // MIDI note number (0 = rest)
    uint16_t duration_ms; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÇ‡∏ô‡πä‡∏ï
    uint16_t delay_ms;    // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏ô‡πä‡∏ï‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
} note_event_t;

// Song Part Structure
typedef struct
{
    const note_event_t *events; // Array ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ô‡πä‡∏ï
    uint16_t event_count;       // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏ô‡πä‡∏ï
    const char *part_name;      // ‡∏ä‡∏∑‡πà‡∏≠ part
} song_part_t;

// Complete Song Structure
typedef struct
{
    const char *song_name;    // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á
    uint8_t song_id;          // ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏û‡∏•‡∏á
    uint8_t tempo_bpm;        // Beats per minute
    uint8_t part_count;       // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô parts
    const song_part_t *parts; // Array ‡∏Ç‡∏≠‡∏á parts
} orchestra_song_t;

// =============================================================
// üéµ SONG 1: Twinkle Twinkle Little Star (4 Parts)
// =============================================================

// Part A: Main Melody
static const note_event_t twinkle_melody[] = {
    {NOTE_C4, 400, 100},
    {NOTE_C4, 400, 100},
    {NOTE_G4, 400, 100},
    {NOTE_G4, 400, 100},
    {NOTE_A4, 400, 100},
    {NOTE_A4, 400, 100},
    {NOTE_G4, 800, 200},

    {NOTE_F4, 400, 100},
    {NOTE_F4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_D4, 400, 100},
    {NOTE_D4, 400, 100},
    {NOTE_C4, 800, 200},

    {NOTE_G4, 400, 100},
    {NOTE_G4, 400, 100},
    {NOTE_F4, 400, 100},
    {NOTE_F4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_D4, 800, 200},

    {NOTE_G4, 400, 100},
    {NOTE_G4, 400, 100},
    {NOTE_F4, 400, 100},
    {NOTE_F4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_D4, 800, 200},

    {NOTE_C4, 400, 100},
    {NOTE_C4, 400, 100},
    {NOTE_G4, 400, 100},
    {NOTE_G4, 400, 100},
    {NOTE_A4, 400, 100},
    {NOTE_A4, 400, 100},
    {NOTE_G4, 800, 200},

    {NOTE_F4, 400, 100},
    {NOTE_F4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_D4, 400, 100},
    {NOTE_D4, 400, 100},
    {NOTE_C4, 800, 400},
    {NOTE_REST, 0, 0}};

// Part B: Harmony (3rd above melody)
static const note_event_t twinkle_harmony[] = {
    {NOTE_E4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_B4, 400, 100},
    {NOTE_B4, 400, 100},
    {NOTE_C5, 400, 100},
    {NOTE_C5, 400, 100},
    {NOTE_B4, 800, 200},

    {NOTE_A4, 400, 100},
    {NOTE_A4, 400, 100},
    {NOTE_G4, 400, 100},
    {NOTE_G4, 400, 100},
    {NOTE_F4, 400, 100},
    {NOTE_F4, 400, 100},
    {NOTE_E4, 800, 200},

    {NOTE_B4, 400, 100},
    {NOTE_B4, 400, 100},
    {NOTE_A4, 400, 100},
    {NOTE_A4, 400, 100},
    {NOTE_G4, 400, 100},
    {NOTE_G4, 400, 100},
    {NOTE_F4, 800, 200},

    {NOTE_B4, 400, 100},
    {NOTE_B4, 400, 100},
    {NOTE_A4, 400, 100},
    {NOTE_A4, 400, 100},
    {NOTE_G4, 400, 100},
    {NOTE_G4, 400, 100},
    {NOTE_F4, 800, 200},

    {NOTE_E4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_B4, 400, 100},
    {NOTE_B4, 400, 100},
    {NOTE_C5, 400, 100},
    {NOTE_C5, 400, 100},
    {NOTE_B4, 800, 200},

    {NOTE_A4, 400, 100},
    {NOTE_A4, 400, 100},
    {NOTE_G4, 400, 100},
    {NOTE_G4, 400, 100},
    {NOTE_F4, 400, 100},
    {NOTE_F4, 400, 100},
    {NOTE_E4, 800, 400},
    {NOTE_REST, 0, 0}};

// Part C: Bass Line (octave lower)
static const note_event_t twinkle_bass[] = {
    {NOTE_C3, 800, 200},
    {NOTE_C3, 800, 200},
    {NOTE_F3, 800, 200},
    {NOTE_C3, 800, 200},

    {NOTE_F3, 800, 200},
    {NOTE_C3, 800, 200},
    {NOTE_G3, 800, 200},
    {NOTE_C3, 800, 200},

    {NOTE_C3, 800, 200},
    {NOTE_F3, 800, 200},
    {NOTE_C3, 800, 200},
    {NOTE_G3, 800, 200},

    {NOTE_C3, 800, 200},
    {NOTE_F3, 800, 200},
    {NOTE_C3, 800, 200},
    {NOTE_G3, 800, 200},

    {NOTE_C3, 800, 200},
    {NOTE_C3, 800, 200},
    {NOTE_F3, 800, 200},
    {NOTE_C3, 800, 200},

    {NOTE_F3, 800, 200},
    {NOTE_C3, 800, 200},
    {NOTE_G3, 800, 200},
    {NOTE_C3, 800, 400},
    {NOTE_REST, 0, 0}};

// Part D: Rhythm/Percussion (using different frequencies)
static const note_event_t twinkle_rhythm[] = {
    {NOTE_G3, 200, 200}, {NOTE_REST, 0, 200}, {NOTE_G3, 200, 200}, {NOTE_REST, 0, 200}, {NOTE_G3, 200, 200}, {NOTE_REST, 0, 200}, {NOTE_G3, 200, 600},

    {NOTE_G3, 200, 200},
    {NOTE_REST, 0, 200},
    {NOTE_G3, 200, 200},
    {NOTE_REST, 0, 200},
    {NOTE_G3, 200, 200},
    {NOTE_REST, 0, 200},
    {NOTE_G3, 200, 600},

    {NOTE_G3, 200, 200},
    {NOTE_REST, 0, 200},
    {NOTE_G3, 200, 200},
    {NOTE_REST, 0, 200},
    {NOTE_G3, 200, 200},
    {NOTE_REST, 0, 200},
    {NOTE_G3, 200, 600},
    {NOTE_G3, 200, 200},
    {NOTE_REST, 0, 200},
    {NOTE_G3, 200, 200},
    {NOTE_REST, 0, 200},
    {NOTE_G3, 200, 200},
    {NOTE_REST, 0, 200},
    {NOTE_G3, 200, 600},
    {NOTE_G3, 200, 200},
    {NOTE_REST, 0, 200},
    {NOTE_G3, 200, 200},
    {NOTE_REST, 0, 200},
    {NOTE_G3, 200, 200},
    {NOTE_REST, 0, 200},
    {NOTE_G3, 200, 400},
    {NOTE_REST, 0, 0}};

// Twinkle Star Parts Array
static const song_part_t twinkle_parts[] = {
    {twinkle_melody, (uint16_t)(sizeof(twinkle_melody) / sizeof(note_event_t) - 1), "Melody"},
    {twinkle_harmony, (uint16_t)(sizeof(twinkle_harmony) / sizeof(note_event_t) - 1), "Harmony"},
    {twinkle_bass, (uint16_t)(sizeof(twinkle_bass) / sizeof(note_event_t) - 1), "Bass"},
    {twinkle_rhythm, (uint16_t)(sizeof(twinkle_rhythm) / sizeof(note_event_t) - 1), "Rhythm"}};

// =============================================================
// üéµ SONG 2: Happy Birthday (3 Parts)
// =============================================================

// Part A: Main Melody
static const note_event_t birthday_melody[] = {
    {NOTE_REST, 0, 400},
    {NOTE_C4, 200, 100},
    {NOTE_C4, 400, 100},
    {NOTE_D4, 800, 100},
    {NOTE_C4, 800, 100},
    {NOTE_F4, 800, 100},
    {NOTE_E4, 1200, 200},

    {NOTE_C4, 200, 100},
    {NOTE_C4, 400, 100},
    {NOTE_D4, 800, 100},
    {NOTE_C4, 800, 100},
    {NOTE_G4, 800, 100},
    {NOTE_F4, 1200, 200},

    {NOTE_C4, 200, 100},
    {NOTE_C4, 400, 100},
    {NOTE_C5, 800, 100},
    {NOTE_A4, 800, 100},
    {NOTE_F4, 800, 100},
    {NOTE_E4, 800, 100},
    {NOTE_D4, 1200, 200},

    {NOTE_B4, 200, 100},
    {NOTE_B4, 400, 100},
    {NOTE_A4, 800, 100},
    {NOTE_F4, 800, 100},
    {NOTE_G4, 800, 100},
    {NOTE_F4, 1200, 400},
    {NOTE_REST, 0, 0}};

// Part B: Harmony
static const note_event_t birthday_harmony[] = {
    {NOTE_REST, 0, 400},
    {NOTE_A3, 200, 100},
    {NOTE_A3, 400, 100},
    {NOTE_B3, 800, 100},
    {NOTE_A3, 800, 100},
    {NOTE_D4, 800, 100},
    {NOTE_C4, 1200, 200},

    {NOTE_A3, 200, 100},
    {NOTE_A3, 400, 100},
    {NOTE_B3, 800, 100},
    {NOTE_A3, 800, 100},
    {NOTE_E4, 800, 100},
    {NOTE_D4, 1200, 200},

    {NOTE_A3, 200, 100},
    {NOTE_A3, 400, 100},
    {NOTE_A4, 800, 100},
    {NOTE_F4, 800, 100},
    {NOTE_D4, 800, 100},
    {NOTE_C4, 800, 100},
    {NOTE_B3, 1200, 200},

    {NOTE_G4, 200, 100},
    {NOTE_G4, 400, 100},
    {NOTE_F4, 800, 100},
    {NOTE_D4, 800, 100},
    {NOTE_E4, 800, 100},
    {NOTE_D4, 1200, 400},
    {NOTE_REST, 0, 0}};

// Part C: Bass
static const note_event_t birthday_bass[] = {
    {NOTE_REST, 0, 400},
    {NOTE_F3, 600, 200},
    {NOTE_F3, 800, 100},
    {NOTE_C3, 800, 100},
    {NOTE_F3, 800, 100},
    {NOTE_C3, 1200, 200},

    {NOTE_F3, 600, 200},
    {NOTE_F3, 800, 100},
    {NOTE_C3, 800, 100},
    {NOTE_G3, 800, 100},
    {NOTE_F3, 1200, 200},

    {NOTE_F3, 600, 200},
    {NOTE_F3, 800, 100},
    {NOTE_F3, 800, 100},
    {NOTE_F3, 800, 100},
    {NOTE_B3, 800, 100},
    {NOTE_A3, 800, 100},
    {NOTE_G3, 1200, 200},

    {NOTE_G3, 600, 200},
    {NOTE_G3, 800, 100},
    {NOTE_F3, 800, 100},
    {NOTE_F3, 800, 100},
    {NOTE_C3, 800, 100},
    {NOTE_F3, 1200, 400},
    {NOTE_REST, 0, 0}};

// Happy Birthday Parts Array
static const song_part_t birthday_parts[] = {
    {birthday_melody, (uint16_t)(sizeof(birthday_melody) / sizeof(note_event_t) - 1), "Melody"},
    {birthday_harmony, (uint16_t)(sizeof(birthday_harmony) / sizeof(note_event_t) - 1), "Harmony"},
    {birthday_bass, (uint16_t)(sizeof(birthday_bass) / sizeof(note_event_t) - 1), "Bass"}};

// =============================================================
// üéµ SONG 3: Mary Had a Little Lamb (2 Parts)
// =============================================================

// Part A: Melody
static const note_event_t mary_melody[] = {
    {NOTE_E4, 400, 100},
    {NOTE_D4, 400, 100},
    {NOTE_C4, 400, 100},
    {NOTE_D4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_E4, 800, 200},

    {NOTE_D4, 400, 100},
    {NOTE_D4, 400, 100},
    {NOTE_D4, 800, 200},
    {NOTE_E4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_E4, 800, 200},

    {NOTE_E4, 400, 100},
    {NOTE_D4, 400, 100},
    {NOTE_C4, 400, 100},
    {NOTE_D4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_D4, 400, 100},
    {NOTE_D4, 400, 100},
    {NOTE_E4, 400, 100},
    {NOTE_D4, 400, 100},
    {NOTE_C4, 800, 400},
    {NOTE_REST, 0, 0}};

// Part B: Harmony
static const note_event_t mary_harmony[] = {
    {NOTE_C4, 400, 100},
    {NOTE_B3, 400, 100},
    {NOTE_A3, 400, 100},
    {NOTE_B3, 400, 100},
    {NOTE_C4, 400, 100},
    {NOTE_C4, 400, 100},
    {NOTE_C4, 800, 200},

    {NOTE_B3, 400, 100},
    {NOTE_B3, 400, 100},
    {NOTE_B3, 800, 200},
    {NOTE_C4, 400, 100},
    {NOTE_C4, 400, 100},
    {NOTE_C4, 800, 200},

    {NOTE_C4, 400, 100},
    {NOTE_B3, 400, 100},
    {NOTE_A3, 400, 100},
    {NOTE_B3, 400, 100},
    {NOTE_C4, 400, 100},
    {NOTE_C4, 400, 100},
    {NOTE_C4, 400, 100},
    {NOTE_B3, 400, 100},
    {NOTE_B3, 400, 100},
    {NOTE_C4, 400, 100},
    {NOTE_B3, 400, 100},
    {NOTE_A3, 800, 400},
    {NOTE_REST, 0, 0}};

// Mary Parts Array
static const song_part_t mary_parts[] = {
    {mary_melody, (uint16_t)(sizeof(mary_melody) / sizeof(note_event_t) - 1), "Melody"},
    {mary_harmony, (uint16_t)(sizeof(mary_harmony) / sizeof(note_event_t) - 1), "Harmony"}};

// =============================================================
// üéµ SONG 4: ‡πÄ‡∏ï‡πà‡∏≤ (Taotao)
//    - Key: C Major
//    - Tempo is assumed (e.g., Quarter Note = 400ms)
//    - {NOTE, Duration_ms, Volume}
// =============================================================

// Part A: Main Melody
static const note_event_t taotao_melody[] = {
    // ‡∏ó‡πà‡∏≠‡∏ô 1: "‡πÄ‡∏ï‡πà‡∏≤ ‡πÄ‡∏ï‡πà‡∏≤ ‡πÄ‡∏ï‡πà‡∏≤"
    {NOTE_G4, 400, 100}, // ‡πÄ‡∏ï‡πà‡∏≤ (Quarter Note)
    {NOTE_G4, 400, 100}, // ‡πÄ‡∏ï‡πà‡∏≤
    {NOTE_G4, 400, 100}, // ‡πÄ‡∏ï‡πà‡∏≤
    {NOTE_G4, 400, 100}, // *‡∏û‡∏±‡∏Å* / ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°

    // "‡∏ô‡∏≤"
    {NOTE_A4, 400, 100}, // ‡∏ô‡∏≤
    {NOTE_G4, 400, 100}, // *‡∏û‡∏±‡∏Å*
    {NOTE_F4, 400, 100}, // *‡∏û‡∏±‡∏Å*
    {NOTE_E4, 400, 100}, // *‡∏û‡∏±‡∏Å*

    // ‡∏ó‡πà‡∏≠‡∏ô 2: "‡∏°‡∏±‡∏ô‡∏°‡∏µ‡∏™‡∏µ‡πà‡∏Ç‡∏≤"
    {NOTE_C4, 400, 100}, // ‡∏°‡∏±‡∏ô
    {NOTE_C4, 400, 100}, // ‡∏°‡∏µ
    {NOTE_C4, 400, 100}, // ‡∏™‡∏µ‡πà
    {NOTE_C4, 400, 100}, // ‡∏Ç‡∏≤

    // "‡∏™‡∏µ‡πà‡∏ï‡∏µ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏°‡∏≤"
    {NOTE_D4, 400, 100}, // ‡∏™‡∏µ‡πà
    {NOTE_D4, 400, 100}, // ‡∏ï‡∏µ‡∏ô
    {NOTE_D4, 400, 100}, // ‡πÄ‡∏î‡∏¥‡∏ô
    {NOTE_D4, 400, 100}, // ‡∏°‡∏≤

    // ‡∏ó‡πà‡∏≠‡∏ô 3: "‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡∏´‡∏±‡∏ß"
    {NOTE_G4, 400, 100}, // ‡∏°‡∏±‡∏ô
    {NOTE_G4, 400, 100}, // ‡∏ó‡∏≥
    {NOTE_G4, 400, 100}, // ‡∏´‡∏±‡∏ß
    {NOTE_G4, 400, 100}, // *‡∏û‡∏±‡∏Å* / ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°

    // "‡∏ú‡∏•‡∏∏‡∏ö‡πÇ‡∏ú‡∏•‡πà"
    {NOTE_A4, 400, 100}, // ‡∏ú‡∏•‡∏∏‡∏ö
    {NOTE_G4, 400, 100}, // ‡πÇ‡∏ú‡∏•‡πà
    {NOTE_F4, 400, 100}, // *‡∏û‡∏±‡∏Å*
    {NOTE_E4, 400, 100}, // *‡∏û‡∏±‡∏Å*

    // ‡∏ó‡πà‡∏≠‡∏ô 4: "‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡∏´‡∏±‡∏ß" (‡∏ã‡πâ‡∏≥)
    {NOTE_C4, 400, 100}, // ‡∏°‡∏±‡∏ô
    {NOTE_C4, 400, 100}, // ‡∏ó‡∏≥
    {NOTE_C4, 400, 100}, // ‡∏´‡∏±‡∏ß
    {NOTE_C4, 400, 100}, // *‡∏û‡∏±‡∏Å* / ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°

    // "‡∏ú‡∏•‡∏∏‡∏ö‡πÇ‡∏ú‡∏•‡πà" (‡∏ã‡πâ‡∏≥)
    {NOTE_D4, 400, 100}, // ‡∏ú‡∏•‡∏∏‡∏ö
    {NOTE_C4, 400, 100}, // ‡πÇ‡∏ú‡∏•‡πà
    {NOTE_REST, 400, 0}, // *‡∏û‡∏±‡∏Å*
    {NOTE_REST, 400, 0}, // *‡∏û‡∏±‡∏Å*

    {NOTE_REST, 0, 0} // End
};

// Part B: Harmony (Simple Octave Down / Supporting Thirds)
static const note_event_t taotao_harmony[] = {
    // ‡∏ó‡πà‡∏≠‡∏ô 1: "‡πÄ‡∏ï‡πà‡∏≤ ‡πÄ‡∏ï‡πà‡∏≤ ‡πÄ‡∏ï‡πà‡∏≤"
    {NOTE_G3, 400, 80}, // Harmony (Octave below)
    {NOTE_G3, 400, 80},
    {NOTE_G3, 400, 80},
    {NOTE_G3, 400, 80},

    // "‡∏ô‡∏≤"
    {NOTE_F4, 400, 80}, // Harmony (Lower Third)
    {NOTE_E4, 400, 80},
    {NOTE_D4, 400, 80},
    {NOTE_C4, 400, 80},

    // ‡∏ó‡πà‡∏≠‡∏ô 2: "‡∏°‡∏±‡∏ô‡∏°‡∏µ‡∏™‡∏µ‡πà‡∏Ç‡∏≤"
    {NOTE_G3, 400, 80}, // Harmony (Lower Octave/Fifth)
    {NOTE_G3, 400, 80},
    {NOTE_G3, 400, 80},
    {NOTE_G3, 400, 80},

    // "‡∏™‡∏µ‡πà‡∏ï‡∏µ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏°‡∏≤"
    {NOTE_F3, 400, 80}, // Harmony (Lower Third)
    {NOTE_F3, 400, 80},
    {NOTE_F3, 400, 80},
    {NOTE_F3, 400, 80},

    // ‡∏ó‡πà‡∏≠‡∏ô 3: "‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡∏´‡∏±‡∏ß"
    {NOTE_G3, 400, 80},
    {NOTE_G3, 400, 80},
    {NOTE_G3, 400, 80},
    {NOTE_G3, 400, 80},

    // "‡∏ú‡∏•‡∏∏‡∏ö‡πÇ‡∏ú‡∏•‡πà"
    {NOTE_F4, 400, 80},
    {NOTE_E4, 400, 80},
    {NOTE_D4, 400, 80},
    {NOTE_C4, 400, 80},

    // ‡∏ó‡πà‡∏≠‡∏ô 4: "‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡∏´‡∏±‡∏ß" (‡∏ã‡πâ‡∏≥)
    {NOTE_G3, 400, 80},
    {NOTE_G3, 400, 80},
    {NOTE_G3, 400, 80},
    {NOTE_G3, 400, 80},

    // "‡∏ú‡∏•‡∏∏‡∏ö‡πÇ‡∏ú‡∏•‡πà" (‡∏ã‡πâ‡∏≥)
    {NOTE_F3, 400, 80},
    {NOTE_G3, 400, 80},
    {NOTE_REST, 400, 0},
    {NOTE_REST, 400, 0},

    {NOTE_REST, 0, 0}};

// Taotao Parts Array
static const song_part_t taotao_parts[] = {
    {taotao_melody, sizeof(taotao_melody) / sizeof(note_event_t) - 1, "Melody"},
    {taotao_harmony, sizeof(taotao_harmony) / sizeof(note_event_t) - 1, "Harmony"}};
// =============================================================
// üéµ SONG 4: Baby Shark (extended 9 verses) ‚Äî 3 buzzers, Key: G
//    A: Melody  B: Ostinato ("doo doo")  C: Bass
//    duration_ms = ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á, delay_ms = ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏ô‡πâ‡∏ï‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
// =============================================================

// ---------- Ostinato helpers ----------
#define DOO_NOTE_DUR 150
#define DOO_NOTE_GAP 100
#define DOO_COUNT 6
#define DOO_PHRASE_MS ((DOO_NOTE_DUR + DOO_NOTE_GAP) * DOO_COUNT) // 1500ms

#define DOO_DOO_CHUNK                                                                 \
    {NOTE_G3, DOO_NOTE_DUR, DOO_NOTE_GAP}, {NOTE_G3, DOO_NOTE_DUR, DOO_NOTE_GAP},     \
        {NOTE_G3, DOO_NOTE_DUR, DOO_NOTE_GAP}, {NOTE_G3, DOO_NOTE_DUR, DOO_NOTE_GAP}, \
        {NOTE_G3, DOO_NOTE_DUR, DOO_NOTE_GAP}, { NOTE_G3, DOO_NOTE_DUR, DOO_NOTE_GAP }

// ‡∏´‡∏ô‡∏∂‡πà‡∏á verse ‡∏Ç‡∏≠‡∏á Ostinato = 3 ‡∏ö‡∏•‡πá‡∏≠‡∏Å "doo" + ‡πÄ‡∏ß‡πâ‡∏ô‡πÉ‡∏´‡πâ Melody ‡∏ä‡πà‡∏ß‡∏á‡∏ï‡∏∞‡πÇ‡∏Å‡∏ô + ‡πÄ‡∏ß‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
#define OST_VERSE                                                           \
    DOO_DOO_CHUNK, {NOTE_REST, 0, 0},                                       \
        DOO_DOO_CHUNK, {NOTE_REST, 0, 0},                                   \
        DOO_DOO_CHUNK, {NOTE_REST, 0, 200},                                 \
        /* support shout (‡πÄ‡∏ö‡∏≤ ‡πÜ) */ {NOTE_G3, 200, 80}, {NOTE_G3, 200, 80}, \
        {NOTE_REST, 0, 400}

// ---------- Melody helpers ----------
#define MELODY_PHRASE(N1, N2, N3) \
    {N1, 200, 100}, {N2, 200, 100}, {N3, 400, 0}, { NOTE_REST, 0, DOO_PHRASE_MS }

// ‡∏´‡∏ô‡∏∂‡πà‡∏á verse ‡∏Ç‡∏≠‡∏á Melody = 3 phrase + ‡πÇ‡∏ô‡πâ‡∏ï‡∏¢‡∏≤‡∏ß‡∏ï‡∏ö‡∏ó‡πâ‡∏≤‡∏¢ + ‡πÄ‡∏ß‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
#define MELODY_VERSE(N1, N2, N3, FINAL) \
    MELODY_PHRASE(N1, N2, N3),          \
        MELODY_PHRASE(N1, N2, N3),      \
        MELODY_PHRASE(N1, N2, N3),      \
        {FINAL, 800, 200}, {NOTE_REST, 0, 400}

// -----------------------------
// Part A: Melody (Lead voice)
// -----------------------------
static const note_event_t baby_shark_melody[] = {
    // 1) Baby Shark (D‚ÄìE‚ÄìG) ‚Üí End on G4
    MELODY_VERSE(NOTE_D4, NOTE_E4, NOTE_G4, NOTE_G4),

    // 2) Mommy Shark (G‚ÄìA‚ÄìC5) ‚Üí End on C5
    MELODY_VERSE(NOTE_G4, NOTE_A4, NOTE_C5, NOTE_C5),

    // 3) Daddy Shark (A‚ÄìB‚ÄìD5) ‚Üí End on D5
    MELODY_VERSE(NOTE_A4, NOTE_B4, NOTE_D5, NOTE_D5),

    // 4) Grandma Shark (E‚ÄìF#‚ÄìA4) ‚Üí End on A4
    MELODY_VERSE(NOTE_E4, NOTE_FS4, NOTE_A4, NOTE_A4),

    // 5) Grandpa Shark (B‚ÄìC#‚ÄìE4) ‚Üí End on E4
    MELODY_VERSE(NOTE_B3, NOTE_CS4, NOTE_E4, NOTE_E4),

    // 6) Let's go hunt (‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏≥‡∏ô‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å D‚ÄìE‚ÄìG) ‚Üí End on G4
    MELODY_VERSE(NOTE_D4, NOTE_E4, NOTE_G4, NOTE_G4),

    // 7) Run away (‡∏ß‡∏¥‡πà‡∏á‡∏´‡∏ô‡∏µ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∂‡∏á‡∏î‡πâ‡∏ß‡∏¢ A‚ÄìB‚ÄìD5) ‚Üí End on D5
    MELODY_VERSE(NOTE_A4, NOTE_B4, NOTE_D5, NOTE_D5),

    // 8) Safe at last (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏°‡∏≤‡∏ó‡∏µ‡πà G‚ÄìA‚ÄìC5) ‚Üí End on C5
    MELODY_VERSE(NOTE_G4, NOTE_A4, NOTE_C5, NOTE_C5),

    // 9) It‚Äôs the end (‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á ‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≠‡∏á D‚ÄìE‚ÄìG) ‚Üí End ‡∏¢‡∏≤‡∏ß‡∏ö‡∏ô G4
    MELODY_VERSE(NOTE_D4, NOTE_E4, NOTE_G4, NOTE_G4),

    {NOTE_REST, 0, 0}};

// -----------------------------------------
// Part B: Ostinato ‚Äî ‚Äúdoo doo doo ...‚Äù
// -----------------------------------------
static const note_event_t baby_shark_ostinato[] = {
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 9 verses ‡πÄ‡∏ï‡πá‡∏°
    OST_VERSE,
    OST_VERSE,
    OST_VERSE,
    OST_VERSE,
    OST_VERSE,
    OST_VERSE,
    OST_VERSE,
    OST_VERSE,
    OST_VERSE,
    {NOTE_REST, 0, 0}};

// -----------------------------
// Part C: Bass (root / I‚ÄìIV‚ÄìV ‡∏™‡∏µ‡∏™‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏≤‡∏¢ verse)
// -----------------------------
#define BASS_BLOCK(ROOT) {ROOT, 800, 100}, {ROOT, 600, 0} // ‚âà 1500ms ‡∏ï‡πà‡∏≠‡∏ö‡∏•‡πá‡∏≠‡∏Å doo
#define BASS_VERSE(R1, R2, R3, SHOUT)               \
    BASS_BLOCK(R1), BASS_BLOCK(R2), BASS_BLOCK(R3), \
        {SHOUT, 600, 0}, {NOTE_REST, 0, 400}

static const note_event_t baby_shark_bass[] = {
    // 1) I‚ÄìI‚ÄìI (G‚ÄìG‚ÄìG)
    BASS_VERSE(NOTE_G2, NOTE_G2, NOTE_G2, NOTE_G2),

    // 2) I‚ÄìIV‚ÄìV (G‚ÄìC‚ÄìD)
    BASS_VERSE(NOTE_G2, NOTE_C3, NOTE_D3, NOTE_G2),

    // 3) I‚ÄìV‚ÄìI (G‚ÄìD‚ÄìG)
    BASS_VERSE(NOTE_G2, NOTE_D3, NOTE_G2, NOTE_G2),

    // 4) IV‚ÄìI‚ÄìV (C‚ÄìG‚ÄìD)
    BASS_VERSE(NOTE_C3, NOTE_G2, NOTE_D3, NOTE_G2),

    // 5) I‚ÄìIV‚ÄìI (G‚ÄìC‚ÄìG)
    BASS_VERSE(NOTE_G2, NOTE_C3, NOTE_G2, NOTE_G2),

    // 6) I‚ÄìI‚ÄìV (G‚ÄìG‚ÄìD)
    BASS_VERSE(NOTE_G2, NOTE_G2, NOTE_D3, NOTE_G2),

    // 7) V‚ÄìIV‚ÄìI (D‚ÄìC‚ÄìG)
    BASS_VERSE(NOTE_D3, NOTE_C3, NOTE_G2, NOTE_G2),

    // 8) IV‚ÄìI‚ÄìIV (C‚ÄìG‚ÄìC)
    BASS_VERSE(NOTE_C3, NOTE_G2, NOTE_C3, NOTE_G2),

    // 9) I‚ÄìV‚ÄìI (G‚ÄìD‚ÄìG) ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô
    BASS_VERSE(NOTE_G2, NOTE_D3, NOTE_G2, NOTE_G2),

    {NOTE_REST, 0, 0}};

// ---------- Parts (3 buzzers) ----------
static const song_part_t baby_shark_parts[] = {
    {baby_shark_melody, (uint16_t)(sizeof(baby_shark_melody) / sizeof(note_event_t) - 1), "Melody"},
    {baby_shark_ostinato, (uint16_t)(sizeof(baby_shark_ostinato) / sizeof(note_event_t) - 1), "Ostinato"},
    {baby_shark_bass, (uint16_t)(sizeof(baby_shark_bass) / sizeof(note_event_t) - 1), "Bass"}};

// =============================================================
// üéµ All Songs Database
// =============================================================
static const orchestra_song_t all_songs[] = {
    {.song_name = "Twinkle Twinkle Little Star",
     .song_id = SONG_TWINKLE_STAR,
     .tempo_bpm = 120,
     .part_count = 4,
     .parts = twinkle_parts},
    {.song_name = "Happy Birthday",
     .song_id = SONG_HAPPY_BIRTHDAY,
     .tempo_bpm = 100,
     .part_count = 3,
     .parts = birthday_parts},
    {.song_name = "Mary Had a Little Lamb",
     .song_id = SONG_MARY_LAMB,
     .tempo_bpm = 140,
     .part_count = 2,
     .parts = mary_parts},
    {.song_name = "‡πÄ‡∏ï‡πà‡∏≤ (Taotao)",
     .song_id = SONG_TAOTAO,
     .tempo_bpm = 100,
     .part_count = 2,
     .parts = taotao_parts},
    {
        .song_name = "Baby Shark",
        .song_id = SONG_BABY_SHARK,
        .tempo_bpm = 120,
        .part_count = 3,          // ‚úÖ ‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô 3
        .parts = baby_shark_parts // ‚úÖ ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ Melody, Ostinato, Bass
    }};

#define TOTAL_SONGS (sizeof(all_songs) / sizeof(orchestra_song_t))

// Helper function to get song by ID
static inline const orchestra_song_t *get_song_by_id(uint8_t song_id)
{
    for (int i = 0; i < (int)TOTAL_SONGS; i++)
    {
        if (all_songs[i].song_id == song_id)
        {
            return &all_songs[i];
        }
    }
    return NULL;
}

#endif // MIDI_SONGS_H
